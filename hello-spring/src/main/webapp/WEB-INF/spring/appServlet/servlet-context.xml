<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	<!-- 기본 namespace는 mvc이다. -->


	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- @Controller 어노테이션이 붙은 클래스가 사용자 요청을 처리할 수 있도록 함 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- 정적파일에 대한 요청 및 location 을 mapping한다. -->
	<!-- /foo/* : /foo, /foo/a -->
	<!-- /foo/** : /foo, /foo/a, /foo/a/b/c.do -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- view단의 jsp를 찾기 위한 ViewResolver빈 등록 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- base-package하위의 어노테이션을 검색/처리 @Component, @Autowired, @Controller, @Service... -->
	<context:component-scan base-package="com.kh.spring" />
	
	<!-- #9. interceptor 등록 -->
	<interceptors>
		<interceptor>
			<mapping path="/**"/>
			<beans:bean
				id="loggerInterceptor"
				class="com.kh.spring.common.interceptor.LoggerInterceptor"/>
		</interceptor>
		<interceptor>
			<mapping path="/member/**"/>
			<exclude-mapping path="/member/memberLogin.do"/>
			<exclude-mapping path="/member/memberEnroll.do"/>
			<beans:bean
				id="LoginInterceptor"
				class="com.kh.spring.common.interceptor.LoginInterceptor"/>
		</interceptor>
	</interceptors>
	
	<!-- #11.1 aop관련 -->
	<!-- xml 방식 -->
	<!-- <beans:bean id="loggerAspect" class="com.kh.spring.common.aop.LoggerAspect" />
	<aop:config>
		<aop:aspect id="loggerAspect" ref="loggerAspect">
			<aop:pointcut expression="execution(* com.kh.spring.memo..memoList(..))" id="loggerPointcut"/>
			<aop:around method="logger" pointcut-ref="loggerPointcut"/>
		</aop:aspect>
	</aop:config> -->
	
	<!-- annotation 방식 -->
	<!-- 
	 	aop관련 annotation 등록
	 	root-context의 aop설정을 servlet-context에 적용.
	 -->
	<aop:aspectj-autoproxy />
	
</beans:beans>
